package example;

import java.io.File;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class GuiClient extends javax.swing.JFrame{
    InetSocketAddress iad = new InetSocketAddress("localhost", 1125);
    SocketChannel sc;
    private Selector selector;
    private boolean connection;
    private LinkedList<byte[]> message = new LinkedList<>();

    public GuiClient() throws IOException {
        this.sc = SocketChannel.open(iad);
        initComponents();
        String name = Thread.currentThread().getName();
        selector  = Selector.open();
        sc.configureBlocking(false);
        System.out.println(name + " Connect to Server...");
        String Text = chatting.getText();
        chatting.setText(Text + "\n" + name + " Connect to Server... \n");// Đưa ra màn hình Gui
        sc.register(selector,SelectionKey.OP_READ);
        new ThreadClient().start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatting = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        idName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pass = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        btnSelectFile = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        filePath = new javax.swing.JLabel();
        chatText = new javax.swing.JTextField();
        toName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chatting.setEditable(false);
        chatting.setColumns(20);
        chatting.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        chatting.setRows(5);
        chatting.setEnabled(false);
        jScrollPane1.setViewportView(chatting);

        jLabel1.setFont(new java.awt.Font("Myriad Pro", 2, 18)); // NOI18N
        jLabel1.setText("Chat with your Friends! ");

        idName.setToolTipText("Your ID");

        jLabel2.setText("Tên đăng nhập:");

        jLabel3.setText("Mật khẩu:");

        pass.setText("Your Password");
        pass.setToolTipText("Your Password");
        pass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                passMousePressed(evt);
            }
        });

        btnLogin.setText("Đăng nhập");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnSelectFile.setFont(new java.awt.Font("UTM Facebook K&T", 3, 14)); // NOI18N
        btnSelectFile.setText("Select file");
        btnSelectFile.setToolTipText("");
        btnSelectFile.setEnabled(false);
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        btnSend.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        btnSend.setText("Gửi");
        btnSend.setEnabled(false);
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        filePath.setText("<none>");
        filePath.setEnabled(false);

        chatText.setEnabled(false);

        toName.setToolTipText("Send to?");
        toName.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(379, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(toName, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                        .addComponent(chatText))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnLogin)
                        .addComponent(idName, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(pass))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(282, Short.MAX_VALUE)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(idName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(37, 37, 37)
                            .addComponent(btnLogin)
                            .addGap(17, 90, Short.MAX_VALUE)))
                    .addComponent(chatText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(toName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passMousePressed
        pass.setText("");
    }//GEN-LAST:event_passMousePressed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            byte[] id = createMes(IdName, idName.getText().getBytes());
            byte[] passW = createMes(PassWord, pass.getText().getBytes());
            byte[] LoginData = createMes(LogIn, id, passW);
            for(byte k : LoginData) System.out.print(k+ "\t");
            this.sendMes(LoginData);
        } catch (IOException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        System.out.println("press send file");
        File file = null;
        JFileChooser choose = new JFileChooser("D:\\");
            int returnVal = choose.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = choose.getSelectedFile();
                filePath.setText(file.getAbsolutePath());
                chatText.setText(file.getName());
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "warring", "Không có đối tượng được chọn", HEIGHT);
            }
            //        ChooseFile jchoose = new ChooseFile();
            //        jchoose.setVisible(true);
            filePath.setEnabled(true);
            Path path = Paths.get(file.getAbsolutePath());
            try {
                System.out.println(file.length());
                byte[] data = Files.readAllBytes(path);
                System.out.println(data.length);
                short TVLlength = (short) (data.length + file.getName().getBytes().length + toName.getText().getBytes().length);
                Integer obs = new Integer(data.length + file.getName().getBytes().length + toName.getText().getBytes().length);
                System.out.println(obs);
                System.out.println(obs.shortValue());
                System.out.println((int)Short.MAX_VALUE-12);
                if( obs < Short.MAX_VALUE-12){
                    // Send with 1 block
                    System.out.println("Send with 1 block");
                    byte[] TVLreciver = createMes(ToName, toName.getText().getBytes());
                    byte[] TVLname = createMes(FileName, file.getName().getBytes());
                    byte[] TVLdata = createMes(FileData, data);
                    byte[] fileTVL = createMes(SigBlock,TVLreciver, TVLname, TVLdata);
                    sendMes(fileTVL);
                }else{
                    // Send with n block
                    System.out.println("Send with n block");
                    byte[] TVLreciver = createMes(ToName, toName.getText().getBytes());
                    byte[] TVLname = createMes(FileName, file.getName().getBytes());
                    //ByteBuffer datalength = ByteBuffer.allocate(4);
                    //datalength.putInt(data.length);
                    
                    byte[] Filesize = createMes(FileSize, String.valueOf(data.length).getBytes());
                    byte[] fileTVL = createMes(FileInfo, TVLreciver, TVLname, Filesize);
                    sendMes(fileTVL);
                    
                    int i;
                    byte[] TVLBlock;
                    int block = Math.round(data.length / (Short.MAX_VALUE-4));
                    System.out.println(block);
                    for (i =0; i< block-1; i++){
                        short x;
                        
                        byte[] TVLfile = Arrays.copyOfRange(data, 0, (Short.MAX_VALUE-4));
                        if (i<10) {TVLBlock = createMes("0"+i, TVLfile);}
                        else {TVLBlock = createMes(""+i, TVLfile); }
                        byte[] fileBlock = createMes(MultiBlock, TVLBlock);
                        sendMes(fileBlock);
                        data = Arrays.copyOfRange(data, Short.MAX_VALUE-4, data.length);
                        for(int u =0; u < data.length; u++) System.out.print(data[u]+ "\t");
                        System.out.println("");
                    }
                    byte[] TVLfile = Arrays.copyOfRange(data, 0, data.length);
                    if (i<10) {TVLBlock = createMes("0"+i, TVLfile);}
                    else {TVLBlock = createMes(""+i, TVLfile); }
                    byte[] fileBlock = createMes(MultiBlock, TVLBlock);
                    sendMes(fileBlock);
                    
                }
                
            } catch (IOException ex) {
                Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (chatText.getText() == null ) chatText.setText("");
        try {
            byte[] from = createMes(FromName, idName.getText().getBytes());
            byte[] chat = createMes(Chat, chatText.getText().getBytes());
            
            if(toName.getText().length() > 0){
                byte[] toName = createMes(ToName, this.toName.getText().getBytes());
                
                byte[] data = createMes(SendTo, toName, from, chat);
                sendMes(data);

            }
            else {
                byte[] data = createMes(Broadcast, from, chat);
                sendMes(data);
            }
        } catch (IOException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        chatText.setText("");
        toName.setText("");
    }//GEN-LAST:event_btnSendActionPerformed

    private Queue<byte[]> Process(byte[] data){
        LinkedList<byte[]> Mes = new LinkedList<>();
        while(data.length >4){
            String IdField = new String(data, 0,2);
            short LengthField = ByteBuffer.wrap(data, 2, 2).getShort();
            byte[] dataField = Arrays.copyOfRange(data, 4, 4+LengthField);
            Mes.add(dataField);

            if (4+ LengthField > data.length) break; else
            data = Arrays.copyOfRange(data,4+LengthField, data.length);

        }
        return Mes;
    }
    
    private byte[] createMes(String key, byte[] ...Message){
        int length = 0;
        for ( int i = 0; i<Message.length; i++){
            length += Message[i].length;
        }

        ByteBuffer byteBuffer = ByteBuffer.allocate(length);
	for (int i = 0; i < Message.length; i++){
            byteBuffer.put(Message[i]);
	}

        byte[] data = byteBuffer.array();
        short lengthData = 0;

        if (data.length > Short.MAX_VALUE){
            lengthData = Short.MAX_VALUE;
            data = Arrays.copyOf(data,lengthData);
        }else{
            lengthData = (short) data.length;
        }
        ByteBuffer dataBuffer = ByteBuffer.allocate(length+4);
        dataBuffer.put(key.getBytes()).putShort(lengthData).put(data);
        return dataBuffer.array();
    }
    
       
    private void sendMes(byte[] TVL) throws IOException {        

        sc.write(ByteBuffer.wrap(TVL));
	SelectionKey key = sc.keyFor(selector);
	key.interestOps(SelectionKey.OP_WRITE);
        
    }
    
    private class ThreadClient extends Thread{
    @Override
    public void run() {
        while(true) {
            try {
                selector.select();
                Set<SelectionKey> keySet = selector.selectedKeys();
                Iterator<SelectionKey> keyIterator = keySet.iterator();

                while(keyIterator.hasNext()) {
                    SelectionKey currentKey = keyIterator.next();
                    keyIterator.remove();

                    if(!currentKey.isValid()) {
                        continue;
                    }
                    if(currentKey.isConnectable()) {
                        System.out.println("I'm connected to the server!");
                        Connectable(currentKey);
                    }

                    if(currentKey.isReadable()){
                        readable(currentKey);
                    }

                    if(currentKey.isWritable()){
                        write(currentKey);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);

        }

    }
    }
    
    private void Connectable(SelectionKey currentKey) throws IOException {
        SocketChannel channel = (SocketChannel) currentKey.channel();
        if(channel.isConnectionPending()) {
            channel.finishConnect();
        }
        channel.configureBlocking(false);
        channel.register(selector,SelectionKey.OP_READ|SelectionKey.OP_WRITE);
        }


    private void readable(SelectionKey currentKey) throws IOException{
        SocketChannel skc = (SocketChannel) currentKey.channel();
        ByteBuffer bff = ByteBuffer.allocate(1024);

        skc.read(bff);

        byte[] TVL = bff.array();

        String Header = new String(TVL,0,2);
        short mesLength = ByteBuffer.wrap(TVL, 2, 2).getShort();
        byte[] data = Arrays.copyOfRange(TVL, 4, 4+ mesLength);
        Queue<byte[]> dataTVL = Process(data);

        switch(Header){
            case LoginTrue:
                chatting.setEnabled(true);
                chatText.setEnabled(true);
                btnSend.setEnabled(true);
                toName.setEnabled(true);
                btnSelectFile.setEnabled(true);
                btnLogin.setEnabled(false);
                byte[] ReL = createMes(RequestLogin, (idName.getText() + " is Login").getBytes());
                byte[] ReLTVL = createMes(RequestLogin, ReL);
                skc.write(ByteBuffer.wrap(ReLTVL));
                break;
            case LoginFalse:
                JOptionPane.showMessageDialog(rootPane, "Login false");
                break;
            case SendTo:

                String from = new String(dataTVL.poll()).trim();
                String chat = new String(dataTVL.poll()).trim();
                String Message_sended = "In send to: " + from + " talk " + chat;
                String text = chatting.getText();
                chatting.setText(text +"\n" + Message_sended);
                break;
            case Broadcast:
                String Message_broadcast = new String(dataTVL.poll()).trim();
                System.out.println(Message_broadcast);
                String text1 = chatting.getText();
                chatting.setText(text1 +"\n" + Message_broadcast);
                break;
            case SigBlock:
                System.out.println("Reciver file SigBlock");
                String nameFile = new String(dataTVL.poll()).trim();
                byte[] datafile = dataTVL.poll();
                Path path = Paths.get("D:\\Hoc\\" + nameFile);
                Files.write(path, datafile);
                System.out.println("Recived file");
                String text2 = chatting.getText();
                chatting.setText(text2 +"\n" + "Recived file: " + nameFile);
                break;
            case FileInfo:
                break;
            case MultiBlock:
                break;
        }
    }

    private void write(SelectionKey currentKey) throws IOException {
        SocketChannel channel = (SocketChannel) currentKey.channel();

	while (!message.isEmpty()) {
			byte[] TVL = message.poll();
			channel.write(ByteBuffer.wrap(TVL));
		}

		currentKey.interestOps(SelectionKey.OP_READ);
    }



    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GuiClient().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    public static final String SendTo = "ST";
    public static final String Broadcast = "BC";
    public static final String FromName = "FN";
    public static final String ToName = "TN";
    public static final String Chat = "CT";
    
    public static final String LogIn = "LI";
    public static final String IdName = "IN";
    public static final String PassWord = "PW";
    public static final String LoginTrue = "LT";
    public static final String LoginFalse = "LF";
    public static final String RequestLogin = "RL";
    
    public static final String SendFile = "SF";
    public static final String FileSize = "FS";
    public static final String FileName = "FN";
    public static final String FileData = "FD";
    public static final String SigBlock = "SB";
    public static final String MultiBlock = "MB";
    public static final String FileInfo = "FI";
    
    private JFileChooser jfileChoose;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JButton btnSend;
    private javax.swing.JTextField chatText;
    private javax.swing.JTextArea chatting;
    private javax.swing.JLabel filePath;
    private javax.swing.JTextField idName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPasswordField pass;
    private javax.swing.JTextField toName;
    // End of variables declaration//GEN-END:variables
}
